[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "shap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shap",
        "description": "shap",
        "detail": "shap",
        "documentation": {}
    },
    {
        "label": "plotly.express",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.express",
        "description": "plotly.express",
        "detail": "plotly.express",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "roc_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "auc",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "roc_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "auc",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_recall_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "make_subplots",
        "importPath": "plotly.subplots",
        "description": "plotly.subplots",
        "isExtraImport": true,
        "detail": "plotly.subplots",
        "documentation": {}
    },
    {
        "label": "gaussian_kde",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "engineer_features",
        "importPath": "model_metrics",
        "description": "model_metrics",
        "isExtraImport": true,
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "align_features",
        "importPath": "model_metrics",
        "description": "model_metrics",
        "isExtraImport": true,
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "plot_roc",
        "importPath": "model_metrics",
        "description": "model_metrics",
        "isExtraImport": true,
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "plot_precision_recall",
        "importPath": "model_metrics",
        "description": "model_metrics",
        "isExtraImport": true,
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "plot_confusion_matrix",
        "importPath": "model_metrics",
        "description": "model_metrics",
        "isExtraImport": true,
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "generate_classification_report",
        "importPath": "model_metrics",
        "description": "model_metrics",
        "isExtraImport": true,
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "st_lottie",
        "importPath": "streamlit_lottie",
        "description": "streamlit_lottie",
        "isExtraImport": true,
        "detail": "streamlit_lottie",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objs",
        "description": "plotly.graph_objs",
        "detail": "plotly.graph_objs",
        "documentation": {}
    },
    {
        "label": "load_lottieurl",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def load_lottieurl(url: str):\n    try:\n        r = requests.get(url)\n        if r.status_code == 200:\n            return r.json()\n    except Exception as e:\n        print(f\"Error loading Lottie: {e}\")\n    return None\n# 🎨 Lottie animation URLs (verified & working)\nsidebar_anim = load_lottieurl(\"https://assets2.lottiefiles.com/packages/lf20_t9gkkhz4.json\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_latest_model",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_latest_model():\n    \"\"\"Find the latest model and its metadata\"\"\"\n    try:\n        # Get all metadata files\n        meta_files = [f for f in os.listdir(MODEL_DIR) \n                    if f.endswith('_metadata.json')]\n        if not meta_files:\n            st.error(\"No model metadata files found\")\n            return None, None, None\n        # Sort by creation date (newest first)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_data_status",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_data_status():\n    \"\"\"Check data file status for freshness\"\"\"\n    try:\n        return os.path.getmtime(DATA_PATH) if os.path.exists(DATA_PATH) else None\n    except Exception as e:\n        st.error(f\"Data status check failed: {str(e)}\")\n        return None\n# Resource loading with smart caching\n@st.cache_resource(show_spinner=False, ttl=3600)\ndef load_model(model_path):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "load_model",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def load_model(model_path):\n    \"\"\"Load model with validation\"\"\"\n    try:\n        model = joblib.load(model_path)\n        # Moved toast notification outside cached function\n        return model\n    except Exception as e:\n        st.error(f\"Model load failed: {str(e)}\")\n        return None\n# Modified load_data to remove Streamlit elements from cached function",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def load_data(_data_status):\n    \"\"\"Load and preprocess data without Streamlit elements\"\"\"\n    try:\n        df = pd.read_csv(DATA_PATH)\n        # Dynamic preprocessing\n        category_mappings = {\n            'REASON': {'HomeImp': 0, 'DebtCon': 1},\n            'JOB': lambda x: pd.factorize(x)[0]\n        }\n        for col, mapping in category_mappings.items():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "COLOR_SCHEME",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "COLOR_SCHEME = {\n    'primary': '#636EFA',  # Vibrant blue\n    'secondary': '#EF553B',  # Vibrant red\n    'background': '#121721',  # Dark blue-gray\n    'success': '#00CC96',  # Teal\n    'danger': '#FF6692',  # Pink\n    'warning': '#FECB52',  # Yellow\n    'info': '#AB63FA',  # Purple\n    'text': '#E2E2E2',  # Light gray\n    'light': '#2A3A4E',  # Lighter dark",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "sidebar_anim",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "sidebar_anim = load_lottieurl(\"https://assets2.lottiefiles.com/packages/lf20_t9gkkhz4.json\")\n# main_anim = load_lottieurl(\"https://assets9.lottiefiles.com/packages/lf20_cyuxhbnc.json\")\nmain_anim = load_lottieurl(\"https://assets4.lottiefiles.com/packages/lf20_mjlh3hcy.json\") \nchart_anim = load_lottieurl(\"https://assets10.lottiefiles.com/packages/lf20_UJNc2t.json\")\nfooter_anim = load_lottieurl(\"https://assets1.lottiefiles.com/packages/lf20_jtbfg2nb.json\")\nskills_anim = load_lottieurl(\"https://assets3.lottiefiles.com/private_files/lf30_5ttqpi.json\")\n# 🎯 Sidebar with animation\nwith st.sidebar:\n    st.markdown(\"### 🤖 Smart AI Dashboard\")\n    if sidebar_anim:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main_anim",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "main_anim = load_lottieurl(\"https://assets4.lottiefiles.com/packages/lf20_mjlh3hcy.json\") \nchart_anim = load_lottieurl(\"https://assets10.lottiefiles.com/packages/lf20_UJNc2t.json\")\nfooter_anim = load_lottieurl(\"https://assets1.lottiefiles.com/packages/lf20_jtbfg2nb.json\")\nskills_anim = load_lottieurl(\"https://assets3.lottiefiles.com/private_files/lf30_5ttqpi.json\")\n# 🎯 Sidebar with animation\nwith st.sidebar:\n    st.markdown(\"### 🤖 Smart AI Dashboard\")\n    if sidebar_anim:\n        st_lottie(sidebar_anim, height=180)\n    st.markdown(\"Welcome! Use the menu to explore predictions and risk factors.\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "chart_anim",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "chart_anim = load_lottieurl(\"https://assets10.lottiefiles.com/packages/lf20_UJNc2t.json\")\nfooter_anim = load_lottieurl(\"https://assets1.lottiefiles.com/packages/lf20_jtbfg2nb.json\")\nskills_anim = load_lottieurl(\"https://assets3.lottiefiles.com/private_files/lf30_5ttqpi.json\")\n# 🎯 Sidebar with animation\nwith st.sidebar:\n    st.markdown(\"### 🤖 Smart AI Dashboard\")\n    if sidebar_anim:\n        st_lottie(sidebar_anim, height=180)\n    st.markdown(\"Welcome! Use the menu to explore predictions and risk factors.\")\n# 🎯 Header",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "footer_anim",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "footer_anim = load_lottieurl(\"https://assets1.lottiefiles.com/packages/lf20_jtbfg2nb.json\")\nskills_anim = load_lottieurl(\"https://assets3.lottiefiles.com/private_files/lf30_5ttqpi.json\")\n# 🎯 Sidebar with animation\nwith st.sidebar:\n    st.markdown(\"### 🤖 Smart AI Dashboard\")\n    if sidebar_anim:\n        st_lottie(sidebar_anim, height=180)\n    st.markdown(\"Welcome! Use the menu to explore predictions and risk factors.\")\n# 🎯 Header\nst.markdown(\"## 📊 Loan Risk Prediction AI Dashboard\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "skills_anim",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "skills_anim = load_lottieurl(\"https://assets3.lottiefiles.com/private_files/lf30_5ttqpi.json\")\n# 🎯 Sidebar with animation\nwith st.sidebar:\n    st.markdown(\"### 🤖 Smart AI Dashboard\")\n    if sidebar_anim:\n        st_lottie(sidebar_anim, height=180)\n    st.markdown(\"Welcome! Use the menu to explore predictions and risk factors.\")\n# 🎯 Header\nst.markdown(\"## 📊 Loan Risk Prediction AI Dashboard\")\nst.markdown(\"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "chart_anim",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "chart_anim = load_lottieurl(\"https://assets2.lottiefiles.com/packages/lf20_49rdyysj.json\")          # Graphs interaction        # Thank you # Project showreel\nloan_risk_anim = load_lottieurl(\"https://assets4.lottiefiles.com/packages/lf20_kyu7xb1v.json\")\n# Premium Custom CSS with Dark Theme\nst.markdown(f\"\"\"\n<style>\n    /* Base Styles */\n    .main {{\n        background: {COLOR_SCHEME['background']};\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        color: {COLOR_SCHEME['text']};",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "loan_risk_anim",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "loan_risk_anim = load_lottieurl(\"https://assets4.lottiefiles.com/packages/lf20_kyu7xb1v.json\")\n# Premium Custom CSS with Dark Theme\nst.markdown(f\"\"\"\n<style>\n    /* Base Styles */\n    .main {{\n        background: {COLOR_SCHEME['background']};\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        color: {COLOR_SCHEME['text']};\n    }}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MODEL_DIR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "MODEL_DIR = \"best_model\"\nDATA_PATH = os.path.join('notebooks', 'cleaned_loan_predictions.csv')\ndef get_latest_model():\n    \"\"\"Find the latest model and its metadata\"\"\"\n    try:\n        # Get all metadata files\n        meta_files = [f for f in os.listdir(MODEL_DIR) \n                    if f.endswith('_metadata.json')]\n        if not meta_files:\n            st.error(\"No model metadata files found\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DATA_PATH",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DATA_PATH = os.path.join('notebooks', 'cleaned_loan_predictions.csv')\ndef get_latest_model():\n    \"\"\"Find the latest model and its metadata\"\"\"\n    try:\n        # Get all metadata files\n        meta_files = [f for f in os.listdir(MODEL_DIR) \n                    if f.endswith('_metadata.json')]\n        if not meta_files:\n            st.error(\"No model metadata files found\")\n            return None, None, None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "metrics",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "metrics = metadata.get('performance_metrics', {})\nst.markdown(\"\"\"\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; margin-bottom: 2rem;\">\n\"\"\", unsafe_allow_html=True)\nmetric_config = [\n    (\"🎯 Accuracy\", metrics.get('Accuracy', 0), \"Percentage of correct predictions\"),\n    (\"🎯 Precision\", metrics.get('Precision', 0), \"True positive rate\"),\n    (\"🎯 Recall\", metrics.get('Recall', 0), \"Positive class coverage\"),\n    (\"🎯 F1 Score\", metrics.get('F1 Score', 0), \"Harmonic mean balance\"),\n    (\"📈 AUC-ROC\", metrics.get('AUC', 0), \"Classification strength score\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "metric_config",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "metric_config = [\n    (\"🎯 Accuracy\", metrics.get('Accuracy', 0), \"Percentage of correct predictions\"),\n    (\"🎯 Precision\", metrics.get('Precision', 0), \"True positive rate\"),\n    (\"🎯 Recall\", metrics.get('Recall', 0), \"Positive class coverage\"),\n    (\"🎯 F1 Score\", metrics.get('F1 Score', 0), \"Harmonic mean balance\"),\n    (\"📈 AUC-ROC\", metrics.get('AUC', 0), \"Classification strength score\")\n]\nfor title, value, desc in metric_config:\n    # Format value based on metric type first\n    if title == \"📈 AUC-ROC\":",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "filtered_df",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "filtered_df = df.copy()\nif job_filter and 'JOB' in df.columns:\n    filtered_df = filtered_df[filtered_df['JOB'].isin(job_filter)]\nif reason_filter and 'REASON' in df.columns:\n    filtered_df = filtered_df[filtered_df['REASON'].isin(reason_filter)]\n# Create tabs with custom styling\ntab1, tab2 = st.tabs([\"🔍 Risk Assessment\", \"📊 Data Insights\"])\n# Risk Assessment Tab\nwith tab1:\n    st.markdown(f\"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "engineer_features",
        "kind": 2,
        "importPath": "model_metrics",
        "description": "model_metrics",
        "peekOfCode": "def engineer_features(df, monthly_rate=0.01, loan_term=12):\n    df = df.copy()\n    # Original feature creation\n    df['EMI'] = (df['LOAN'] * monthly_rate * (1 + monthly_rate)**loan_term) / ((1 + monthly_rate)**loan_term - 1)\n    # Binned features\n    df['YOJ_BINNED'] = pd.cut(df['YOJ'], \n                              bins=[-1, 2, 5, 10, 20, 40], \n                              labels=['0-2', '2-5', '5-10', '10-20', '20+'])\n    df['CLAGE_BINNED'] = pd.cut(df['CLAGE'], \n                                bins=[-1, 60, 120, 180, 240, 500], ",
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "align_features",
        "kind": 2,
        "importPath": "model_metrics",
        "description": "model_metrics",
        "peekOfCode": "def align_features(X, model):\n    if hasattr(model, 'feature_names_in_'):\n        expected = model.feature_names_in_\n        missing = set(expected) - set(X.columns)\n        for col in missing:\n            X[col] = 0\n        X = X[expected]\n    return X\n# --- ROC Curve ---\ndef plot_roc(y_true, y_proba, color_scheme):",
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "plot_roc",
        "kind": 2,
        "importPath": "model_metrics",
        "description": "model_metrics",
        "peekOfCode": "def plot_roc(y_true, y_proba, color_scheme):\n    fpr, tpr, _ = roc_curve(y_true, y_proba)\n    auc_score = auc(fpr, tpr)\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=fpr, y=tpr, mode='lines',\n                             name=f'ROC Curve (AUC = {auc_score:.2f})',\n                             line=dict(color=color_scheme['primary'], width=3)))\n    fig.add_trace(go.Scatter(x=[0, 1], y=[0, 1], mode='lines',\n                             name='Random Guessing',\n                             line=dict(color=color_scheme['danger'], dash='dash')))",
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "plot_precision_recall",
        "kind": 2,
        "importPath": "model_metrics",
        "description": "model_metrics",
        "peekOfCode": "def plot_precision_recall(y_true, y_proba, color_scheme):\n    precision, recall, _ = precision_recall_curve(y_true, y_proba)\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=recall, y=precision, mode='lines',\n                             name='Precision-Recall Curve',\n                             line=dict(color=color_scheme['success'], width=3)))\n    fig.update_layout(\n        xaxis_title='Recall',\n        yaxis_title='Precision',\n        plot_bgcolor=color_scheme['card'],",
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "plot_confusion_matrix",
        "kind": 2,
        "importPath": "model_metrics",
        "description": "model_metrics",
        "peekOfCode": "def plot_confusion_matrix(y_true, y_pred, color_scheme):\n    cm = confusion_matrix(y_true, y_pred)\n    fig = go.Figure(data=go.Heatmap(\n        z=cm,\n        x=['Predicted 0', 'Predicted 1'],\n        y=['Actual 0', 'Actual 1'],\n        colorscale='cividis',  # Updated to 'crest' colorscale\n        showscale=True\n    ))\n    fig.update_layout(",
        "detail": "model_metrics",
        "documentation": {}
    },
    {
        "label": "generate_classification_report",
        "kind": 2,
        "importPath": "model_metrics",
        "description": "model_metrics",
        "peekOfCode": "def generate_classification_report(y_true, y_pred):\n    report = classification_report(y_true, y_pred, output_dict=False)\n    return report",
        "detail": "model_metrics",
        "documentation": {}
    }
]